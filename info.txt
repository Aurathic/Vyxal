ᵃ = apply to neighbours [applies to windows of length 2]
ᵇ = number of truthy items by element
ᶜ = reduce columns
ᵈ = remove duplicates by element
ᵉ = invariant / Equal under element
ᶠ = Filter by Element
ᶢ = Apply last element to register
ᴴ = Apply element only to the head of list
ᶤ = find the index for the first element such that function evaluates as truthy
ᶨ = Loop an element. Repeat until the results are no longer unique. Record intermediate results.
ᵏ = Key. Map an element over the groups formed by identical items.
¶ = NOP
ᶪ = Loop an element. Repeat until the results are no longer unique.
ᵐ = maximum by element
ⁿ = mimimum by element
ᵒ = Outer Product / Table
ᵖ = map over prefixes
ᴿ = Reject by Element
ᶳ = Sort by element
ᵗ = Tie. Cycle through a number of (default 2) elements each time called.
ᵘ = run func on the prev result until the result no longer changes returning all intermediate results
ᵛ = vectorise over rows (map with each row as entire input)
ᵂ = Reduce each overlap of size 2 by an element
ᵡ = scan fixedpoint [apply until a previous value is repeated, collecting intermediate results]
ᵞ = vertical scan
ᶻ = zipwith
ᶴ = Apply element only to the first n elements of list
′ = Last Element as Function
″ = Last Two Elements as Function
‴ = Last Three Elements as Function
⁴ = Last Four Elements as Function
ᵜ = Lambda to start of line
  = NOP
! = Factorial / Uppercase
" = String
# = Digraph
$ = Swap
% = Modulo / String format / <str, num>
& = Concatenate ([1, 2, 3] & [4, 5] = [1, 2, 3, [4, 5]])
' = single character
( = for-loop start
) = close two structures
* = exponentation / remove nth letter / trim - Trim all elements of y from both sides of x.
+ = addition / string concat
, = print
- = subtraction / remove string
. = decimal
/ = Foldl / Reduce left
0 = numeric literal
1 = numeric literal
2 = numeric literal
3 = numeric literal
4 = numeric literal
5 = numeric literal
6 = numeric literal
7 = numeric literal
8 = numeric literal
9 = numeric literal
: = duplicate
; = [a, b]
< = less than
= = equals
> = greater than
? = input
@ = Apply at indices (modifier)
A = All
B = To binary
C = Count of rhs in lhs
D = Triplicate
E = 2 ** n / Evaluate
F = Filter by function / lhs in base rhs from 10
G = Monadic maximum
H = To/from hexadecimal
I = Interleave
J = Merge ([1, 2, 3] J [4, 5] = [1, 2, 3, 4, 5])
K = Factors / is numeric
L = Length
M = Map function to list / Dyadic maximum (vectorises)
N = Negate / swap case / first non-negative integer where a pred is true
O = Ord / chr
P = Prefixes
Q = Exit
R = Reduce by function / range between two numbers / regex match?
S = Sort input ascending
T = Triple / Contains only alphabet? / Transpose list
U = Uninterleave
V = Vectorised reverse / complement (1 - z) / title case
W = Wrap stack
X = Return early / Break loop
Y = List repeat lhs rhs times
Z = Zip lhs and rhs / zip map
[ = Open if statement
\ = scanl
] = Pair with
^ = Reverse stack
_ = pop and discard
` = apply last element to each item, treating the item as a stack: ƛ~}
a = any()
b = from binary
c = lhs contains rhs
d = double / dyadify
e = even? / split string on newlines
f = flatten
g = monadic minimum
h = head lhs[0]
i = index
j = join on
k = constant digraph
l = vectorising lengths
m = context 1
n = context 2
o = overlaps
p = prepend
q = quotify
r = replace
s = split
t = tail lhs[-1]
u = unique / dedup
v = Vectorise element
w = wrap item
x = recurse
y = lhs in base 10 from base rhs
z = transpose with filler
{ = open while loop
| = structure thing
} = close structure
~ = Apply element without popping
¦ = "|"
Ȧ = Absolute value / keep only alphabet characters
Ḃ = Return a Boolean array with 1s at the indices in a list.
Ċ = Cycle a list infinitely
Ḋ = Divides? / Remove duplicates by function result / lhs + " " * rhs
Ė = Eval as vyxal / 10 ** n
Ḟ = Find
Ġ = Generate from function / gcd
Ḣ = a[0], a[1:]
İ = Index into (alt: slice)
Ŀ = Logarithm / scan fixedpoint [apply until a previous value is repeated, collecting intermediate results] / len(lhs) == rhs
Ṁ = 
Ṅ = 
Ȯ = 
Ṗ = 
Ṙ = 
Ṡ = 
Ṫ = 
Ẇ = 
Ẋ = 
Ẏ = 
Ż = 
ȧ = 
ḃ = 
ċ = 
ḋ = 
ė = 
ḟ = 
ġ = 
ḣ = 
ŀ = 
ṁ = 
ṅ = 
ȯ = 
ṗ = 
ṙ = 
ṡ = 
ṫ = 
ẇ = 
ẋ = 
ẏ = 
ż = 
Ạ = 
Ḅ = 
Ḍ = 
Ẹ = 
Ḥ = 
Ị = 
Ḳ = 
Ḷ = 
Ṃ = 
Ṇ = 
Ọ = 
Ṛ = 
Ṣ = 
Ṭ = 
Ẓ = 
ạ = 
ḅ = 
ḍ = 
ẹ = 
ḥ = 
ị = 
ḳ = 
ḷ = 
ṃ = 
ṇ = 
ọ = 
ṛ = 
ṣ = 
ṭ = 
ẓ = 
≤ = 
≥ = 
≠ = 
₌ = 
⁺ = 
⁻ = 
⁾ = 
√ = 
∑ = 
« = 
» = 
⌐ = 
∴ = 
∵ = 
⊻ = 
₀ = 
₁ = 
₂ = 
₃ = 
₄ = 
₅ = 
₆ = 
₇ = 
₈ = 
₉ = 
λ = 
ƛ = 
Ω = 
₳ = 
µ = 
∆ = 
ø = 
Þ = 
½ = 
ʑ = 
ʓ = 
¯ = 
× = Multiplication / string repetition / ring translate
÷ = 
£ = 
¥ = 
← = 
↑ = 
→ = 
↓ = 
± = 
‡ = 
† = 
0 = 
¬ = 
∧ = 
∨ = 
⁰ = 
¹ = 
² = 
³ = 
¤ = 
⁺ = 
∥ = Parallel apply
∦ = Parallel apply into list
ı = 
„ = 
” = 
ð = 
‘ = 
“ = 
¶ = 
ᶿ = 
ᶲ = 
• = 
≈ = 
¿ = Conditional Execution
ꜝ = Inner-product by element
